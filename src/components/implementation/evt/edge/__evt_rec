/**
 * Copyright 2008 by Boston University.  All rights reserved.
 * Copyright 2011 by The George Washington University.  All rights reserved.
 *
 * Redistribution of this file is permitted under the GNU General
 * Public License v2.
 *
 * Author: Gabriel Parmer, gabep1@cs.bu.edu, 2008.
 * Author: Gabriel Parmer, gparmer@gwu.edu, 2011.
 */

#define COS_FMT_PRINT

#include <cos_synchronization.h>
#include <cos_component.h>
#include <cos_alloc.h>
#include <cos_debug.h>
#include <cos_list.h>
#include <print.h>
#include <cos_map.h>

#include <cvect.h>

#include <errno.h>

#include <objtype.h>

#include <evt_impl.h>
#include <evt.h>

#include <sched.h>

#include <name_server.h>

// spd 11 for create/free, spd 12 for wait and spd 13 for trigger

/* Note: evt_create fault can happen before and after event created in
 * name server. evt_free fault can happen before and after event
 * removed in name server 

 * Here is the pattern: if the fault happens in the function that ever
 * write out something, we need be careful since the fault before the
 * fault has the different effect from the fault occurred after the
 * write out!!!! If the fault occurs in a function that only reads,
 * then no different where the fault happens !!!!
 */

/* #define TEST_EVT_CREATE */
/* #define TEST_EVT_FREE */
/* #define TEST_EVT_WAIT */
/* #define TEST_EVT_TRIGGER */

/* #define TEST_EVT_SPLIT */  // not support this yet
static int test_num = 0;

//#define ACT_LOG
#ifdef ACT_LOG
#define ACT_LOG_LEN 32
#define ACTION_TIMESTAMP 1

typedef enum {
	ACT_TRIGGER,
	ACT_WAKEUP,
	ACT_SLEEP,
	ACT_WAIT,
	ACT_WAIT_GRP
} action_t;
typedef enum {
	ACT_SPDID,
	ACT_EVT_ID,
	ACT_T1,
	ACT_T2,
	ACT_ITEM_MAX
} action_item_t;
#define NUM_ACT_ITEMS ACT_ITEM_MAX
#include <cos_actlog.h>
#define ACT_RECORD(a, s, e, t1, t2)					\
	do {								\
		unsigned long as[] = {s, e, t1, t2};			\
		action_record(a, as, NULL);				\
	} while (0)
#else
#define ACT_RECORD(a, s, e, t1, t2)
#endif

CVECT_CREATE_STATIC(evtmap_vect);  // cache purpose
/* A mapping between event ids and actual events */
COS_MAP_CREATE_STATIC(evt_map);
cos_lock_t evt_lock;
struct evt_grp grps;

/* 
 * mapping_* functions are for maintaining mappings between an
 * external event and an event structure 
 */
static long mapping_create(spdid_t spdid, struct evt *e)
{
	/* Jiguo: replace map_add with ns_getid. However, there is one
	 * issue here -- if the fault occurs after following function
	 * and before return to the client, then we basically create
	 * "holes" in the name server.
	 
	 Solution: on the client where evt_create is invoked, also
	 call evt_updateid to indicate the client has received id
	 
	 */
	long id = ns_getid(spdid);
	assert(id >= 0);
	printc("cvect add --> id %ld\n", id);
        /* why need to delete such id?? After fault, we might find an
	 * entry at this position, so we delete first??? */
	cvect_del(&evtmap_vect, id);
	cvect_add(&evtmap_vect, e, id);
	return id;
	/* return cos_map_add(&evt_map, e); */
}

static inline struct evt *mapping_find(long extern_evt)
{
	/* struct evt *e = cos_map_lookup(&evt_map, extern_evt); */
	// replace with cvect now,  Jiguo
	struct evt *e = cvect_lookup(&evtmap_vect, extern_evt);

	if (NULL == e) return e;
	printc("in mapping find 1 (e@%p)\n", e);
	printc("evt: e->extern_id %ld (passed in extern_id %ld)\n", e->extern_id, extern_evt);

	if (!e->extern_id) {
		struct evt *new = cvect_lookup(&evtmap_vect, e->next->extern_id);
		assert(new);
		e = new;
	} else {
		assert(e->extern_id == extern_evt);
	}
	
	printc("in mapping found e with id %ld\n", e->extern_id);
	return e;
}

static void mapping_free(long extern_evt)
{
	/* if (cos_map_del(&evt_map, extern_evt)) BUG(); */
	// replace with cvect as cache, Jiguo
	cvect_del(&evtmap_vect, extern_evt);	
	ns_delid(cos_spd_id(), extern_evt);
}

/* 
 * evt_grp_* functions maintain a mapping between an "event group" and
 * a set of events.  In our case, we are assuming that an event group
 * is essentially a thread.  Thus a thread can wait for a set of
 * events defined by it's "event group".
 */
static inline struct evt_grp *evt_grp_create(spdid_t spdid, long gid)
{
	struct evt_grp *g = malloc(sizeof(struct evt_grp));

	if (!g) return NULL;
	evt_grp_init(g, spdid, gid);
	return g;
}

static inline void evt_grp_free(struct evt_grp *g)
{
	int i;

	if (!EMPTY_LIST(g, next, prev)) {
		REM_LIST(g, next, prev);
	}
	while (!EMPTY_LIST(&g->events, next, prev)) {
		struct evt *e;
		
		e = FIRST_LIST(&g->events, next, prev);
		REM_LIST(e, next, prev);
	}
	for (i = 0 ; i < EVT_NUM_PRIOS ; i++) {
		while (!EMPTY_LIST(&g->triggered[i], next, prev)) {
			struct evt *e;
			
			e = FIRST_LIST(&g->triggered[i], next, prev);
			REM_LIST(e, next, prev);
		}
	}
	free(g);
}

static inline struct evt_grp *evt_grp_find(long gid)
{
	struct evt_grp *g;

	for (g = FIRST_LIST(&grps, next, prev) ; g != &grps ; g = FIRST_LIST(g, next, prev)) {
		if (g->tid == gid) return g;
	}
	return NULL;
}

static inline int evt_grp_add(struct evt_grp *g)
{
	ADD_LIST(&grps, g, next, prev);
	return 0;
}

/* 
 * FIXME: keeping the lock during a bunch of memory allocation.  This
 * is never good, but the code is much simpler for it.  A trade-off
 * I'm commonly making now.
 */
long evt_create(spdid_t spdid)
{
	u16_t tid = cos_get_thd_id();
	struct evt_grp *g;
	struct evt *e;
	int ret = -ENOMEM;

/* #if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_CREATE) */
/* 	if (spdid == 11 && cos_get_thd_id() == 11 && test_num++ > 2) { */
/* 		printc("trigger fault in evt_create: thd %d spd %ld passed spd %d\n", cos_get_thd_id(), cos_spd_id(), spdid); */
/* 		assert(0); */
/* 	} */
/* #endif */

	lock_take(&evt_lock);
	g = evt_grp_find(tid);
	/* If the group associated with this thread hasn't been
	 * created yet. */
	if (!g) {
		g = evt_grp_create(spdid, tid);
		if (NULL == g) goto err;
		e = __evt_new(g);
		if (NULL == e) {
			evt_grp_free(g);
			goto err;
		}
		evt_grp_add(g);
	} else {
		e = __evt_new(g);
		if (NULL == e) goto err;
	}
	e->extern_id = mapping_create(spdid, e);
	e->n_received = 0;
	if (0 > e->extern_id) goto free_evt_err;
	ret = e->extern_id;
	
	/* what if the fault happens here?? In name server, an entry
	 * is only valid if it is marked with "received". After every
	 * fault, all entries without received will be removed. See
	 * name_sever ns_del_norecevied(), called in each cos_init */
#if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_CREATE)
	if (spdid == 11 && cos_get_thd_id() == 11 && test_num++ > 2) {
		printc("trigger fault in evt_create: thd %d spd %ld passed spd %d\n", cos_get_thd_id(), cos_spd_id(), spdid);
		assert(0);
	}
#endif

done:
	lock_release(&evt_lock);
	return ret;
free_evt_err:
	__evt_free(e);
err:
	goto done;
}

void evt_free(spdid_t spdid, long extern_evt)
{
	struct evt *e;

	lock_take(&evt_lock);

#if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_FREE)
	if (spdid == 11 && cos_get_thd_id() == 11 && test_num++ > 2) {
		printc("trigger fault in evt_free: thd %d spd %ld passed spd %d\n", cos_get_thd_id(), cos_spd_id(), spdid);
		assert(0);
	}
#endif

	e = mapping_find(extern_evt);
	if (NULL == e) goto done;
	__evt_free(e);
	mapping_free(extern_evt);
	/* what if the fault happens here?? Use reflection on
	 * name_server to check if an event has been removed. See
	 * evt_free cli_interface */
/* #if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_FREE) */
/* 	if (spdid == 11 && cos_get_thd_id() == 11 && test_num++ > 2) { */
/* 		printc("trigger fault in evt_free: thd %d spd %ld passed spd %d\n", cos_get_thd_id(), cos_spd_id(), spdid); */
/* 		assert(0); */
/* 	} */
/* #endif */

done:
	lock_release(&evt_lock);
	return;
}

/* Wait on a group of events (like epoll) */
long evt_grp_wait(spdid_t spdid)
{
	struct evt_grp *g;
	struct evt *e = NULL;
	long extern_evt;

	while (1) {
		lock_take(&evt_lock);

		g = evt_grp_find(cos_get_thd_id());
		ACT_RECORD(ACT_WAIT_GRP, spdid, e ? e->extern_id : 0, cos_get_thd_id(), 0);
		if (NULL == g) goto err;
		if (__evt_grp_read(g, &e)) goto err;

		if (NULL != e) {
			extern_evt = e->extern_id;
			lock_release(&evt_lock);
			return extern_evt;
		} else {
			lock_release(&evt_lock);
			ACT_RECORD(ACT_SLEEP, spdid, 0, cos_get_thd_id(), 0);
			if (0 > sched_block(cos_spd_id(), 0)) BUG();
		}
	}
err:
	lock_release(&evt_lock);
	return -1; 
}

/* As above, but return more than one event notifications */
int evt_grp_mult_wait(spdid_t spdid, struct cos_array *data)
{
	struct evt_grp *g;
	struct evt *e = NULL;
	int evt_gathered = 0, evt_max;

	if (!cos_argreg_arr_intern(data)) return -EINVAL;
	evt_max = data->sz / sizeof(long);

	while (1) {
		lock_take(&evt_lock);

		g = evt_grp_find(cos_get_thd_id());
		ACT_RECORD(ACT_WAIT_GRP, spdid, e ? e->extern_id : 0, cos_get_thd_id(), 0);
		if (NULL == g) goto err;

		/* gather multiple events */
		do {
			if (__evt_grp_read_noblock(g, &e)) goto err;
			if (NULL != e) {
				((long*)data->mem)[evt_gathered] = e->extern_id;
				evt_gathered++;
			}
		} while (e && evt_gathered < evt_max);

		/* return them if they were gathered */
		if (evt_gathered > 0) {
			lock_release(&evt_lock);
			return evt_gathered;
		}

		/* 
		 * otherwise sleep till there is an event (first we
		 * need to call evt_grp_read to set the blocked
		 * status)
		 */
		if (__evt_grp_read(g, &e)) goto err;
		assert(NULL == e);
		lock_release(&evt_lock);
		ACT_RECORD(ACT_SLEEP, spdid, 0, cos_get_thd_id(), 0);
		if (0 > sched_block(cos_spd_id(), 0)) BUG();
	}
err:
	lock_release(&evt_lock);
	return -1; 
	
}


/* Jiguo: only called when new server side id is recreated. Assume
 * this will not fail for now */
int
evt_updateid(spdid_t spdid, int cli_id, int cur_id) 
{
	int ret = -1;
	
	printc("evt: update ..... (cli_id %d, cur_id %d)\n", cli_id, cur_id);

	lock_take(&evt_lock);

	ret = ns_setid(spdid, cli_id, cur_id);

	if (likely(cli_id == cur_id)) {
		ret = 0;
		goto done;
	}

	// fault path of cache
	struct evt *curr = mapping_find(cur_id);
	if (!curr) goto done;
	/* this will recreate event for cli_id, and is only used for
	 * mapping, not by event manager anymore. Will be deleted  */
	printc("AAAAAAA\n");
	cvect_del(&evtmap_vect, cli_id);
	struct evt *e;
	e = malloc(sizeof(struct evt));
	if (NULL == e) goto done;
	e->next = curr;
	e->extern_id = 0;  // 0 indicates this entry is invalid in cache
	printc("BBBBBBB\n");
	cvect_add(&evtmap_vect, e, cli_id);
	ret = 0;
	printc("evt: update ..... done@!!!\n");
done:
	lock_release(&evt_lock);	
	return ret;
}

/* volatile int bid = 0; */

int __evt_wait(spdid_t spdid, long extern_evt, int n)
{
	struct evt *e;

	while (1) {
		int ret;

#if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_WAIT)
		if (spdid == 12 && cos_get_thd_id() == 11 && test_num++ > 3) {
			printc("trigger fault in evt_wait (test_num %d): thd %d spd %ld passed spd %d\n", test_num, cos_get_thd_id(), cos_spd_id(), spdid);
			assert(0);
		}
#endif
	
		printc("22222 (extern evt id %ld)\n", extern_evt);
		lock_take(&evt_lock);
		e = mapping_find(extern_evt);
		if (NULL == e) goto err;
		printc("333333\n");
		if (0 > (ret = __evt_read(e))) goto err;
		printc("444444\n");
		ACT_RECORD(ACT_WAIT, spdid, e->extern_id, cos_get_thd_id(), 0);
		e->n_wait = n;
		e->core_id = cos_cpuid();
		if (ret == 1) e->n_received = 0;
		lock_release(&evt_lock);
		if (1 == ret) {
			printc("555555\n");
			/* assert(extern_evt == e->extern_id); */  // after recovery, this might not be true. Jiguo
			return 0;
		} else {
			ACT_RECORD(ACT_SLEEP, spdid, e->extern_id, cos_get_thd_id(), 0);

			/* We can use acaps to block / wakeup, which
			 * can avoid calling scheduler. But it's like
			 * a hack. */
			printc("block 666666\n");
			if (0 > sched_block(cos_spd_id(), 0)) BUG();
			/* printc("thread %d wakes up from block\n", cos_get_thd_id()); */
		}
	}

err:
	lock_release(&evt_lock);
	return -1; 
}

/* Wait for a specific event */
int evt_wait(spdid_t spdid, long extern_evt)
{
	printc("1111\n");
	return __evt_wait(spdid, extern_evt, 1);
}

/* Wait for a specific event */
int evt_wait_n(spdid_t spdid, long extern_evt, int n)
{
	return __evt_wait(spdid, extern_evt, n);
}

int evt_trigger(spdid_t spdid, long extern_evt)
{
	struct evt *e;
	int ret = 0;
	cpuid_t core;

#if (RECOVERY_ENABLE == 1) && defined(TEST_EVT_TRIGGER)
	if (spdid == 13 && cos_get_thd_id() == 12 && test_num++ > 2) {
		printc("trigger fault in evt_trigger: thd %d spd %ld passed spd %d\n", cos_get_thd_id(), cos_spd_id(), spdid);
		assert(0);
	}
#endif

	lock_take(&evt_lock);

	e = mapping_find(extern_evt);
	if (NULL == e) {
		printc("can not find event. Return.");
		goto err;
	}

	ACT_RECORD(ACT_TRIGGER, spdid, e->extern_id, cos_get_thd_id(), 0);
	core = e->core_id;
	/* Trigger an event being waited for? */
	if (0 != (ret = __evt_trigger(e))) {
		lock_release(&evt_lock);
		ACT_RECORD(ACT_WAKEUP, spdid, e->extern_id, cos_get_thd_id(), ret);

		if (sched_wakeup(cos_spd_id(), ret)) BUG();
	} else {
		lock_release(&evt_lock);
	}

	return 0;
err:
	lock_release(&evt_lock);
	return -1;
}

int evt_set_prio(spdid_t spdid, long extern_evt, int prio)
{
	struct evt *e;

	if (prio >= EVT_NUM_PRIOS) return -1;

	lock_take(&evt_lock);
	e = mapping_find(extern_evt);
	if (NULL == e) goto err;
	e->prio = prio;
	/* FIXME: place into correct list in the group if it is triggered */
	lock_release(&evt_lock);
	return 0;
err:
	lock_release(&evt_lock);
	return -1;
}

void cos_init(void *arg)
{
	lock_static_init(&evt_lock);
	cos_map_init_static(&evt_map);
        // Now we use cvect for cache, and id is got from name_server
	/* if (mapping_create(NULL) != 0) BUG(); */  
	cvect_init_static(&evtmap_vect);  // Jiguo: for cache between faults
	INIT_LIST(&grps, next, prev);

	ns_del_norecevied();   // free all not received id in nameserver
}

#ifdef ACT_LOG

unsigned long *evt_stats(spdid_t spdid, unsigned long *stats)
{
	struct action *a;
	int sz = (NUM_ACT_ITEMS + 2) * sizeof(unsigned long);

	if (!cos_argreg_buff_intern((char*)stats, sz)) {
		return NULL;
	}
	
	if (NULL == (a = action_report())) return NULL;
	memcpy(stats, a, sz);
	return stats;
}

int evt_stats_len(spdid_t spdid)
{
	return NUM_ACT_ITEMS + 2;
}

#else

unsigned long *evt_stats(spdid_t spdid, unsigned long *stats) { return NULL; }
int evt_stats_len(spdid_t spdid) { return 0; }

#endif

long __evt_create(spdid_t spdid) {return 0;}


long evt_split(spdid_t spdid, long parent, int group) { return -1; }
